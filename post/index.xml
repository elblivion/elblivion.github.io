<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on elblivion.github.io</title>
    <link>https://elblivion.github.io/post/</link>
    <description>Recent content in Posts on elblivion.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Anthony Stanton, All rights reserved.</copyright>
    <lastBuildDate>Sun, 29 May 2016 01:22:14 +0200</lastBuildDate>
    <atom:link href="https://elblivion.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Slimmer Ubuntu PPA in docker</title>
      <link>https://elblivion.github.io/post/slimmer-ubuntu-ppa-in-docker/</link>
      <pubDate>Sun, 29 May 2016 01:22:14 +0200</pubDate>
      
      <guid>https://elblivion.github.io/post/slimmer-ubuntu-ppa-in-docker/</guid>
      <description>&lt;p&gt;Many of my Docker images for testing software for production are based on Ubuntu, because that&amp;rsquo;s  what we use in production and while I love Alpine Linux-based images it&amp;rsquo;s  just too much overhead, not to mention self-defeating, to be hunting for equivalent packages all the time in a different distro and dealing with dynamic linking issues. Still, that image size tho!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ubuntu   14.04               b549a9959a66        7 weeks ago         188 MB
alpine   3.3                 d7a513a663c1        8 weeks ago         4.798 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One annoying thing, though, is when I need a package from a PPA. Since it makes it self-contained in the Dockerfile we began using the &lt;code&gt;add-apt-repository&lt;/code&gt;, but this includes Python and lots of dependencies, which is OK on a VM but makes the container extremely heavy.&lt;/p&gt;

&lt;p&gt;Recently while building &lt;a href=&#34;http://openresty.org/&#34;&gt;Openresty&lt;/a&gt; in a container I simply wanted to add &lt;a href=&#34;https://github.com/sstephenson/bats&#34;&gt;Bats&lt;/a&gt; to a testing container, and pulling this whole Python environment slowed the testing step down - so I used the following, which requires an extra file but is way more lightweight. You also need to manually specify the PGP key ID of the PPA, but I&amp;rsquo;m not sure having to check that is a bad thing. :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# my base container, based on ubuntu:14.04
FROM openresty-trusty

# Install bats
ADD files/bats.list /etc/apt/sources.list.d
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5F28EA3F &amp;amp;&amp;amp; \
  apt-get update &amp;amp;&amp;amp; \
  apt-get install -y bats &amp;amp;&amp;amp; \
  rm -rf /var/lib/apt/lists/*

COPY . /app

WORKDIR /app

CMD [&amp;quot;./scripts/test.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ cat files/bats.list
deb http://ppa.launchpad.net/duggan/bats/ubuntu trusty main
deb-src http://ppa.launchpad.net/duggan/bats/ubuntu trusty main
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Adventures in User-Data</title>
      <link>https://elblivion.github.io/post/user-data/</link>
      <pubDate>Sat, 13 Feb 2016 22:55:14 +0100</pubDate>
      
      <guid>https://elblivion.github.io/post/user-data/</guid>
      <description>

&lt;p&gt;One of my first tasks at my current employer was to automate bootstrapping of our AWS EC2 instances: to get them in a state where Chef could run on them without having to do any manual fiddling after launch.&lt;/p&gt;

&lt;p&gt;To achieve this two things were needed, both requiring a lot of trial and error: an &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html&#34;&gt;IAM instance profile&lt;/a&gt; to let EC2 instances access other AWS resources without having to distribute API keys, and a &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts&#34;&gt;User-Data script&lt;/a&gt;, which is a shell script that is run automatically on boot to set up. This is part of &lt;a href=&#34;http://cloudinit.readthedocs.org/en/latest/index.html&#34;&gt;Cloud-init&lt;/a&gt;, a standard for early initialisation of cloud instances.&lt;/p&gt;

&lt;p&gt;Generally the less you do in these scripts the better, because they are a royal pain to debug. (Hint: it involves creating and destroying a lot of test instances.) These days most of our set-up has been farmed out to &lt;a href=&#34;https://www.packer.io/&#34;&gt;Packer&lt;/a&gt;, which can build a custom AMI server image based on a stock Linux image on which it runs our set-up commands, install the versions of Ruby and Chef we want, and so on. This means the instances boot faster and that the User-Data script has less things to do.&lt;/p&gt;

&lt;p&gt;Our custom AMIs include tools like the &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; command-line JSON processor, which we can use to process the output of &lt;a href=&#34;https://github.com/hungryblank/gofog&#34;&gt;goFog&lt;/a&gt;, Contentful CTO Paolo&amp;rsquo;s Go tool for basic interactions with the AWS API. Currently it supports reading information about EC2 instances, including their tags, which we use for environment discovery, and also publishing to SNS topics. Also being a Go program it&amp;rsquo;s distributed as a statically-linked binary which from a deployment and operations point of view is great.&lt;/p&gt;

&lt;p&gt;All the files we need for bootstrapping Chef, and our own packaged apps, are stored on S3. So &lt;a href=&#34;http://s3tools.org/s3cmd&#34;&gt;s3cmd&lt;/a&gt; is another important piece. I&amp;rsquo;ve been looking for a Go-based replacement, and mulling adding S3 support to goFog - for bootstrapping at least we only need GetObject operations - but I haven&amp;rsquo;t yet found one that works out of the box.&lt;/p&gt;

&lt;p&gt;With this in mind we need an IAM role policy sort of like:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/elblivion.js&#34;&gt;&lt;/script&gt;


&lt;h2 id=&#34;but-instance-bootstrapping-can-still-fail-what-then:22895e17efbac64b92cbb4351d6c7861&#34;&gt;But instance bootstrapping can still fail. What then?&lt;/h2&gt;

&lt;p&gt;Even with custom AMIs we still depend on external services on boot. The User-Data script refreshes the APT cache, fetches files from S3, reads instance data from the EC2 API&amp;hellip; all of these have been known to fail. Currently we run some Auto Scaling groups without attaching them to Elastic Load Balancers, so we have no health check that can fail a new instance that wasn&amp;rsquo;t able to set up correctly.&lt;/p&gt;

&lt;p&gt;After a recent near-miss incident where we could have ended up swapping all the app servers in one group with new ones that weren&amp;rsquo;t able to set up correctly (we use termination policies that favour terminating older instances) I looked at ways of getting warned when a new instance failed to set up. I was about to find and add error checking to every bit of code that might make requests when I recalled recently making use of the Bash &lt;a href=&#34;http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html&#34;&gt;&lt;code&gt;trap&lt;/code&gt; builtin&lt;/a&gt;. On investigation it turned out that using &lt;code&gt;set -e&lt;/code&gt;, which I knew to make a Bash script exit immediately on failure, can be caught by setting a &lt;code&gt;trap&lt;/code&gt; - so this could be used to warn an operator:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/elblivion.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;code&gt;sns_region&lt;/code&gt; and &lt;code&gt;sns_topic&lt;/code&gt; are template variables, since this User-Data script is templated by &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;, but that&amp;rsquo;s a subject for another post. :-)&lt;/p&gt;

&lt;p&gt;And so - hopefully - we get paged and total disaster is averted!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>